# user www-data www-data;
worker_processes  1;
pid /run/nginx.pid;
include /etc/nginx/modules/http_cache_purge.conf;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    access_log  /dev/stdout   main_timed;
    error_log   /dev/stderr   info;

    sendfile                  off;
    keepalive_timeout         65;

    # server_tokens             off;

    gzip on;
    gzip_disable "msie6";
    gzip_proxied any;

    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript;

    fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=WORDPRESS:500m inactive=30d;
    fastcgi_cache_key "$scheme$request_method$host$request_uri";
    fastcgi_cache_use_stale error timeout invalid_header http_500;
    fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
    add_header X-Cache-Status $upstream_cache_status;

    server {
        listen 80;
        listen [::]:80;
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name _;

        # Increase proxy buffers for large requests
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Upload limit
        client_max_body_size 100m;
        client_body_buffer_size 128k;

        root /home/site/wwwroot;
        index index.php;

        set $skip_cache 0;

        # POST requests and urls with a query string should always go to PHP
        if ($request_method = POST) {
            set $skip_cache 1;
        }   
        # if ($query_string != "") {
        #     set $skip_cache 1;
        # }   

        # Don't cache uris containing the following segments
        if ($request_uri ~* "/wp-admin/|/xmlrpc.php|wp-.*.php|/feed/|index.php|sitemap(_index)?.xml") {
            set $skip_cache 1;
        }   

        # Don't use the cache for logged in users or recent commenters
        if ($http_cookie ~* "comment_author|wordpress_[a-f0-9]+|wp-postpass|wordpress_no_cache|wordpress_logged_in") {
            set $skip_cache 1;
        }

        # redirect server error pages to the static page /50x.html
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /var/lib/nginx/html;
        }

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location = /robots.txt {
            log_not_found off;
            access_log off;
        }

    # WORDFENCE FALCON ENGINE CODE
		#Match on gzip first because ordering matters.
		location ~ "/wp-content/wfcache/.*gzip$" {
			gzip off;
			types {}
			default_type text/html;
			add_header Vary "Accept-Encoding, Cookie";
			add_header Content-Encoding gzip;
		}
		#If the previous matched, the following location won't be executed.
		location ~ /wp-content/wfcache/.* {
			add_header Vary "Accept-Encoding, Cookie";
		}
		set $wordfenceCacheOn 1;

		#Don't cache form submissions.
		if ($request_method = POST) {
			set $wordfenceCacheOn 0;
		}

		#Allow caching of /?123=123 because this is a common DDoS to override caches.
		if ($query_string !~ "^(?:d+=d+)?$") {
			set $wordfenceCacheOn 0;
		}

		#Only cache URL's ending in /
		if ($request_uri !~ /$) {
			set $wordfenceCacheOn 0;
		}
		#Don't cache any cookies with this in their names e.g. users who are logged in.
		if ($http_cookie ~* "(comment_author|wp-postpass|wf_logout|wordpress_logged_in|wptouch_switch_toggle|wpmp_switcher)") {
			set $wordfenceCacheOn 0;
		}
		set $wordfenceEncoding "";
		#Oh, you want gzipped content?
		if ($http_accept_encoding ~ gzip) {
			set $wordfenceEncoding _gzip;
		}
		set $wordfenceHTTPS "";
		if ($scheme = 'https'){
			#If you want to ENABLE HTTPS caching, comment out the next line.
			set $wordfenceCacheOn 0; #Comment this line out to enable HTTPS caching.

			set $wordfenceHTTPS '_https'; #Uncomment this line to enable HTTPS caching.
		}
		#The main purpose of this line is to capture the URL components into variables.
		if ($request_uri !~ "^/*(?<wfone>[^/]*)/*(?<wftwo>[^/]*)/*(?<wfthree>[^/]*)/*(?<wffour>[^/]*)/*(?<wffive>[^/]*)(?<wfsix>.*)$"){
			set $wordfenceCacheOn 0;
		}
		#If the file doesn't exist then don't serve from cache.
		if (!-f "$document_root/wp-content/wfcache/${http_host}_${wfone}/${wftwo}~${wfthree}~${wffour}~${wffive}~${wfsix}_wfcache${wordfenceHTTPS}.html${wordfenceEncoding}") {
			set $wordfenceCacheOn 0;
		}

		if ($wordfenceCacheOn = 1) {
			rewrite .* "/wp-content/wfcache/${http_host}_${wfone}/${wftwo}~${wfthree}~${wffour}~${wffive}~${wfsix}_wfcache${wordfenceHTTPS}.html${wordfenceEncoding}" last;
		}
    # END Wordfence Rules


        # Based on https://codeable.io/wordpress-developers-intro-to-docker-part-two/
        location /wp-content {
            root /home/site/wwwroot;
            expires 7d;
            add_header Cache-Control "public";
        }

        location / {
            # First attempt to serve request as file, then
            # as directory, then fall back to index.php
            try_files $uri $uri/ /index.php?q=$uri&$args;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        location ~ \.php$ {
            fastcgi_index index.php;
            fastcgi_keep_conn on;
            include /etc/nginx/fastcgi.conf;
            fastcgi_pass unix:/run/php7.1-fpm.sock;
            fastcgi_connect_timeout 300s;
            fastcgi_read_timeout 300s;
            fastcgi_send_timeout 300s;

            fastcgi_cache_bypass $skip_cache;
	        fastcgi_no_cache $skip_cache;
            fastcgi_cache WORDPRESS;
	        fastcgi_cache_valid 200 30d;
        }

        location ~ /purge(/.*) {
            fastcgi_cache_purge WORDPRESS "$scheme$request_method$host$1";
        }	

        # deny access to . files, for security
        location ~ /\. {
            log_not_found off;
            deny all;
        }

    # BEGIN W3TC Minify cache
        location ~ /wp-content/cache/minify/.*\.js$ {
            types {}
            default_type application/x-javascript;
            expires modified 31536000s;
            add_header Vary "Accept-Encoding";
        }
        location ~ /wp-content/cache/minify/.*\.css$ {
            types {}
            default_type text/css;
            expires modified 31536000s;
            add_header Vary "Accept-Encoding";
        }
        location ~ /wp-content/cache/minify/.*js_gzip$ {
            gzip off;
            types {}
            default_type application/x-javascript;
            expires modified 31536000s;
            add_header Vary "Accept-Encoding";
            add_header Content-Encoding gzip;
        }
        location ~ /wp-content/cache/minify/.*css_gzip$ {
            gzip off;
            types {}
            default_type text/css;
            expires modified 31536000s;
            add_header Vary "Accept-Encoding";
            add_header Content-Encoding gzip;
        }
    # END W3TC Minify cache
    # BEGIN W3TC Browser Cache
        gzip on;
        gzip_types text/css text/x-component application/x-javascript application/javascript text/javascript text/x-js text/richtext image/svg+xml text/plain text/xsd text/xsl text/xml image/bmp application/java application/msword application/vnd.ms-fontobject application/x-msdownload image/x-icon image/webp application/json application/vnd.ms-access application/vnd.ms-project application/x-font-otf application/vnd.ms-opentype application/vnd.oasis.opendocument.database application/vnd.oasis.opendocument.chart application/vnd.oasis.opendocument.formula application/vnd.oasis.opendocument.graphics application/vnd.oasis.opendocument.spreadsheet application/vnd.oasis.opendocument.text audio/ogg application/pdf application/vnd.ms-powerpoint application/x-shockwave-flash image/tiff application/x-font-ttf audio/wav application/vnd.ms-write application/font-woff application/font-woff2 application/vnd.ms-excel;
        location ~ \.(css|htc|less|js|js2|js3|js4)$ {
            expires 31536000s;
            etag on;
            if_modified_since exact;
            add_header Pragma "public";
            add_header Cache-Control "max-age=31536000, public";
            try_files $uri $uri/ $uri.html /index.php?$args;
        }
        location ~ \.(html|htm|rtf|rtx|svg|txt|xsd|xsl|xml)$ {
            expires 31536000s;
            etag on;
            if_modified_since exact;
            add_header Pragma "public";
            add_header Cache-Control "max-age=31536000, public";
            try_files $uri $uri/ $uri.html /index.php?$args;
        }
        location ~ \.(asf|asx|wax|wmv|wmx|avi|bmp|class|divx|doc|docx|eot|exe|gif|gz|gzip|ico|jpg|jpeg|jpe|webp|json|mdb|mid|midi|mov|qt|mp3|m4a|mp4|m4v|mpeg|mpg|mpe|mpp|otf|_otf|odb|odc|odf|odg|odp|ods|odt|ogg|pdf|png|pot|pps|ppt|pptx|ra|ram|svg|svgz|swf|tar|tif|tiff|ttf|ttc|_ttf|wav|wma|wri|woff|woff2|xla|xls|xlsx|xlt|xlw|zip)$ {
            expires 31536000s;
            etag on;
            if_modified_since exact;
            add_header Pragma "public";
            add_header Cache-Control "max-age=31536000, public";
            try_files $uri $uri/ $uri.html /index.php?$args;
        }
        location ~ \.(bmp|class|doc|docx|eot|exe|ico|webp|json|mdb|mpp|otf|_otf|odb|odc|odf|odg|odp|ods|odt|ogg|pdf|pot|pps|ppt|pptx|svg|svgz|swf|tif|tiff|ttf|ttc|_ttf|wav|wri|woff|woff2|xla|xls|xlsx|xlt|xlw)$ {
            etag off;
            if_modified_since off;
            try_files $uri $uri/ $uri.html /index.php?$args;
        }
    # END W3TC Browser Cache

    # BEGIN W3TC Minify core
        rewrite ^/wp-content/cache/minify/ /index.php last;
    # END W3TC Minify core


    }
}
